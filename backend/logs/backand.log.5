2025-08-17 20:48:51,295 ERROR: Exception on /api/projects [GET] [in B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py:875]
Traceback (most recent call last):
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask_cors\extension.py", line 176, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "B:\IT\Web\copy\backend\app\api\handlers.py", line 61, in get_projects
    return jsonify([to_dict(p) for p in projects])
                    ~~~~~~~^^^
  File "B:\IT\Web\copy\backend\app\api\handlers.py", line 40, in to_dict
    result['blocks'] = {block.name: {'floors': [floor.number for floor in sorted(block.floors, key=lambda f: f.number)]} for block in instance.blocks}
                                                                                                                                      ^^^^^^^^^^^^^^^
TypeError: 'Block' object is not iterable
2025-08-17 20:48:52,251 ERROR: Exception on /api/projects [GET] [in B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py:875]
Traceback (most recent call last):
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask_cors\extension.py", line 176, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "B:\IT\Web\copy\backend\app\api\handlers.py", line 61, in get_projects
    return jsonify([to_dict(p) for p in projects])
                    ~~~~~~~^^^
  File "B:\IT\Web\copy\backend\app\api\handlers.py", line 40, in to_dict
    result['blocks'] = {block.name: {'floors': [floor.number for floor in sorted(block.floors, key=lambda f: f.number)]} for block in instance.blocks}
                                                                                                                                      ^^^^^^^^^^^^^^^
TypeError: 'Block' object is not iterable
2025-08-17 22:18:38,954 INFO: Test task [in B:\IT\Web\copy\backend\app\__init__.py:31]
2025-08-17 22:19:18,067 ERROR: Exception on /api/projects/grw [DELETE] [in B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py:875]
Traceback (most recent call last):
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask_cors\extension.py", line 176, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ~^^^^^^^^^^^^^^^^^
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "B:\IT\Web\copy\backend\app\api\handlers.py", line 163, in delete_project
    db.session.delete(project)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\sqlalchemy\orm\scoping.py", line 674, in delete
    return self._proxied.delete(instance)
           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\sqlalchemy\orm\session.py", line 3542, in delete
    self._delete_impl(state, instance, head=True)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\sqlalchemy\orm\session.py", line 3569, in _delete_impl
    cascade_states = list(
        state.manager.mapper.cascade_iterator("delete", state)
    )
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\sqlalchemy\orm\mapper.py", line 3979, in cascade_iterator
    queue = deque(
        prop.cascade_iterator(
    ...<5 lines>...
        )
    )
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\sqlalchemy\orm\relationships.py", line 1526, in cascade_iterator
    tuples = self._value_as_iterable(
        state, dict_, self.key, passive=passive
    )
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\sqlalchemy\orm\relationships.py", line 1502, in _value_as_iterable
    for o in impl.get_collection(state, dict_, x, passive=passive)
             ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\sqlalchemy\orm\writeonly.py", line 234, in get_collection
    history = self._get_collection_history(state, passive)
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\sqlalchemy\orm\writeonly.py", line 404, in _get_collection_history
    return self.collection_history_cls(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, state, passive, apply_to=c
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "B:\IT\Web\test_task2\backend\Lib\site-packages\sqlalchemy\orm\writeonly.py", line 94, in __init__
    raise exc.InvalidRequestError(
    ...<5 lines>...
    )
sqlalchemy.exc.InvalidRequestError: Attribute Floor.works can't load the existing state from the database for this operation; full iteration is not permitted.  If this is a delete operation, configure passive_deletes=True on the Floor.works relationship in order to resolve this error.
