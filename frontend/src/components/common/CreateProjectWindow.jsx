import React, { useState, useEffect } from 'react';
import styles from '../../styles/common/CreateWindow.module.scss';

export default function CreateProjectWindow({
    isOpen,
    onClose,
    project: initialProject,
    addProject,
    editProject,
    showNotification
}) {
    const [formData, setFormData] = useState({});
    const [blocks, setBlocks] = useState([]);
    const [objects, setObjects] = useState([]);

    useEffect(() => {
        if (isOpen) {
            if (initialProject) {
                setFormData({
                    code: initialProject.code || '',
                    icon: initialProject.icon || 'üè¢',
                    name: initialProject.name || '',
                    description: initialProject.description || '',
                    client: initialProject.client || '',
                    contractor: initialProject.contractor || '',
                    address: initialProject.address || '',
                    startDate: initialProject.start_date || '',
                    endDate: initialProject.end_date || '',
                    budget: initialProject.budget || ''
                });

                const loadedBlocks = (initialProject.blocks || []).map(block => {
                    const floors = block.floors;
                    const numericFloors = floors.filter(f => !isNaN(parseInt(f))).map(f => parseInt(f)).sort((a,b) => a-b);
                    const extraFloors = floors.filter(f => isNaN(parseInt(f)));
                    return {
                        name: block.name,
                        floorFrom: numericFloors.length > 0 ? numericFloors[0].toString() : '',
                        floorTo: numericFloors.length > 0 ? numericFloors[numericFloors.length - 1].toString() : '',
                        floorExtra: extraFloors.join(', ')
                    };
                });
                setBlocks(loadedBlocks.length > 0 ? loadedBlocks : [{ name: '', floorFrom: '', floorTo: '', floorExtra: '' }]);
                
                setObjects(initialProject.objects || []);
                
            } else {
                setFormData({
                    code: '',
                    icon: 'üè¢',
                    name: '',
                    description: '',
                    client: '',
                    contractor: '',
                    address: '',
                    startDate: '',
                    endDate: '',
                    budget: '',
                });
                setBlocks([{ name: '–ë–°-1', floorFrom: '1', floorTo: '9', floorExtra: '' }]);
                setObjects(["–í–ù–°", "–ö–≤–∞—Ä—Ç–∏—Ä—ã", "–ö–æ–º–º–µ—Ä—Ü–∏—è", "–õ–µ—Å—Ç. –º.", "–õ–∏—Ñ—Ç.—Ö–æ–ª–ª", "–ú–û–ü", "–≠–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–∞—è"]);
            }
        }
    }, [isOpen, initialProject]);

    const handleObjectChange = (e) => {
        const value = e.target.value;
        setObjects(value.split(',').map(o => o.trim()));
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleBlockChange = (index, field, value) => {
        const newBlocks = [...blocks];
        newBlocks[index][field] = value;
        setBlocks(newBlocks);
    };

    const addBlock = () => {
        setBlocks(prev => [...prev, { name: `–ë–°-${prev.length + 1}`, floorFrom: '', floorTo: '', floorExtra: '' }]);
    };

    const removeBlock = (index) => {
        if (blocks.length > 1) {
            setBlocks(prev => prev.filter((_, i) => i !== index));
        } else {
            showNotification('–î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–ª–æ–∫', 'warning');
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
    
        const projectBlocks = blocks.map(block => {
            const floors = [];
            if (block.floorExtra) {
                block.floorExtra.split(',').forEach(f => {
                    const trimmed = f.trim();
                    if (trimmed) floors.push(trimmed);
                });
            }
            const from = parseInt(block.floorFrom);
            const to = parseInt(block.floorTo);
            if (!isNaN(from) && !isNaN(to) && from <= to) {
                for (let i = from; i <= to; i++) {
                    floors.push(i.toString());
                }
            }
            return {
                name: block.name,
                floors: floors
            };
        }).filter(block => block.name);
    
        const projectData = {
            code: formData.code,
            icon: formData.icon,
            name: formData.name,
            description: formData.description,
            client: formData.client,
            contractor: formData.contractor,
            address: formData.address,
            start_date: formData.startDate || null,
            end_date: formData.endDate || null,
            budget: formData.budget ? parseFloat(formData.budget) : 0,
            blocks: projectBlocks,
            objects: objects.filter(o => o),
        };
    
        try {
            if (initialProject) {
                await editProject(initialProject.code, projectData);
                showNotification('Project updated successfully!', 'success');
            } else {
                await addProject(projectData);
                showNotification('Project created successfully!', 'success');
            }
            onClose();
        } catch (error) {
            showNotification(`Error: ${error.message}`, 'error');
            console.error('Project save error:', error);
        }
    };

    if (!isOpen) return null;

    return (
        <div className={styles.modal}>
            <div className={styles.modalContent}>
                <div className={styles.modalHeader}>
                    <h2 className={styles.modalTitle}>{initialProject ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'}</h2>
                    <span className={styles.close} onClick={onClose}>&times;</span>
                </div>
                
                <form onSubmit={handleSubmit}>
                    <div className={styles.formGrid}>
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ *</label>
                            <input type="text" className={styles.formControl} name="code" value={formData.code || ''} onChange={handleChange} placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: gulkevichi-1" required />
                            <small>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞</small>
                        </div>
                        
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–ò–∫–æ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</label>
                            <select className={styles.formControl} name="icon" value={formData.icon || 'üè¢'} onChange={handleChange}>
                                <option value="üè¢">üè¢ –û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ</option>
                                <option value="üèóÔ∏è">üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ</option>
                                <option value="üè≠">üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç</option>
                                <option value="üè†">üè† –ñ–∏–ª–æ–π –¥–æ–º</option>
                                <option value="üè´">üè´ –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ</option>
                                <option value="üè•">üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ</option>
                                <option value="üè®">üè® –ì–æ—Å—Ç–∏–Ω–∏—Ü–∞</option>
                                <option value="üè™">üè™ –¢–æ—Ä–≥–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ</option>
                            </select>
                        </div>
                        
                        <div className={styles.formGroupFullWidth}>
                            <label className={styles.formLabel}>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *</label>
                            <input type="text" className={styles.formControl} name="name" value={formData.name || ''} onChange={handleChange} placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: –ñ–ö –ì—É–ª—å–∫–µ–≤–∏—á–∏" required />
                        </div>
                        
                        <div className={styles.formGroupFullWidth}>
                            <label className={styles.formLabel}>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</label>
                            <textarea className={styles.formControl} name="description" rows="3" value={formData.description || ''} onChange={handleChange} placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏"></textarea>
                        </div>
                        
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–ó–∞–∫–∞–∑—á–∏–∫</label>
                            <input type="text" className={styles.formControl} name="client" value={formData.client || ''} onChange={handleChange} placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞" />
                        </div>
                        
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–ü–æ–¥—Ä—è–¥—á–∏–∫</label>
                            <input type="text" className={styles.formControl} name="contractor" value={formData.contractor || ''} onChange={handleChange} placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞" />
                        </div>
                        
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞</label>
                            <input type="text" className={styles.formControl} name="address" value={formData.address || ''} onChange={handleChange} placeholder="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞" />
                        </div>
                        
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞</label>
                            <input type="date" className={styles.formControl} name="startDate" value={formData.startDate || ''} onChange={handleChange} />
                        </div>
                        
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞</label>
                            <input type="date" className={styles.formControl} name="endDate" value={formData.endDate || ''} onChange={handleChange} />
                        </div>
                        
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ (—Ä—É–±.)</label>
                            <input type="number" className={styles.formControl} name="budget" value={formData.budget || ''} onChange={handleChange} placeholder="0" />
                        </div>
                        
                        <h3 className={styles.h3}>üè¢ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–ª–æ–∫–æ–≤</h3>
                        
                        <div className={styles.formGroupFullWidth}>
                            <label className={styles.formLabel}>–ë–ª–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞</label>
                            <div id="blocksContainer">
                                {blocks.map((block, index) => (
                                    <div key={index} className={styles.blockConstructor}>
                                        <div className={styles.blockHeader}>
                                            <input type="text" className={`${styles.formControl} ${styles.blockName}`} placeholder={`–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–°-${index + 1})`} value={block.name} onChange={(e) => handleBlockChange(index, 'name', e.target.value)} style={{flex: 1, marginRight: '10px'}} />
                                            <button type="button" className={`${styles.btn} ${styles.btnDanger} ${styles.btnSmall}`} onClick={() => removeBlock(index)}>üóëÔ∏è</button>
                                        </div>
                                        <div className={styles.floorRange}>
                                            <label>–û—Ç —ç—Ç–∞–∂–∞:</label>
                                            <input type="text" className={`${styles.formControl} ${styles.floorFrom}`} placeholder="1" value={block.floorFrom} onChange={(e) => handleBlockChange(index, 'floorFrom', e.target.value)} />
                                            <label>–î–æ —ç—Ç–∞–∂–∞:</label>
                                            <input type="text" className={`${styles.formControl} ${styles.floorTo}`} placeholder="9" value={block.floorTo} onChange={(e) => handleBlockChange(index, 'floorTo', e.target.value)} />
                                            <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:</label>
                                            <input type="text" className={`${styles.formControl} ${styles.floorExtra}`} placeholder="–ü–æ–¥–≤–∞–ª, –¢–µ—Ö.—ç—Ç–∞–∂" value={block.floorExtra} onChange={(e) => handleBlockChange(index, 'floorExtra', e.target.value)} />
                                        </div>
                                    </div>
                                ))}
                            </div>
                            <button type="button" className={`${styles.btn} ${styles.btnSuccess} ${styles.btnSmall}`} onClick={addBlock}>‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫</button>
                            <small className={styles.smallText}>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–ª–æ–∫–∏ –∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ</small>
                        </div>
                        
                        <div className={styles.formGroupFullWidth}>
                            <label className={styles.formLabel}>–û–±—ä–µ–∫—Ç—ã (–ø–æ–º–µ—â–µ–Ω–∏—è)</label>
                            <textarea className={styles.formControl} name="objects" rows="3" value={objects.join(', ')} onChange={handleObjectChange} placeholder="–ö–≤–∞—Ä—Ç–∏—Ä—ã, –ú–û–ü, –õ–∏—Ñ—Ç.—Ö–æ–ª–ª, –õ–µ—Å—Ç. –º., –≠–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–∞—è, –í–ù–°, –ö–æ–º–º–µ—Ä—Ü–∏—è"></textarea>
                            <small className={styles.smallText}>–¢–∏–ø—ã –ø–æ–º–µ—â–µ–Ω–∏–π/–æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</small>
                        </div>
                    </div>
                    
                    <div className={styles.modalFooter}>
                        <button type="button" className={`${styles.btn} ${styles.btnDanger}`} onClick={onClose}>–û—Ç–º–µ–Ω–∞</button>
                        <button type="submit" className={`${styles.btn} ${styles.btnSuccess}`}>
                            {initialProject ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}
